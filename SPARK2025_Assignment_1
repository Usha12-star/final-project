{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"#If_elif_else statements (type_of_imaging_modalities)\ndef scan_type_classification():\n    \"\"\"\n    Given modality is \"MRI\",Classify the imaging modalities based on given information.\n    Returns:\n        str:Classification of of imaging modality.\n    \"\"\"\n    modality =\"MRI\"\n    if modality==\"MRI\":\n        return \"Magnetic Resonance Imaging\"\n    elif modality==\"CT\":\n        return \"Computated Tomography\"\n    else:\n        return \"Other imaging modality\"\nprint(scan_type_classification())","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-02-27T04:03:31.294871Z","iopub.execute_input":"2025-02-27T04:03:31.295248Z","iopub.status.idle":"2025-02-27T04:03:31.301321Z","shell.execute_reply.started":"2025-02-27T04:03:31.295221Z","shell.execute_reply":"2025-02-27T04:03:31.300192Z"}},"outputs":[{"name":"stdout","text":"Magnetic Resonance Imaging\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"#If_elif_else statements (patients_risk_level)\ndef patient_risk_level():\n    \"\"\"\n    Given age is \"65\",Classify the patient risk level based on age.\n    Returns:\n        str:The patient risk classification\n    \"\"\"\n    age = 65\n    if age >60:\n        return\"High Risk\"\n    elif 40 <= age <= 60:\n        return\"Moderate Risk\" \n    else:\n        return\"Low risk\"\n\nprint(patient_risk_level())\n        ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T04:22:09.984749Z","iopub.execute_input":"2025-02-27T04:22:09.985311Z","iopub.status.idle":"2025-02-27T04:22:09.992021Z","shell.execute_reply.started":"2025-02-27T04:22:09.985274Z","shell.execute_reply":"2025-02-27T04:22:09.990611Z"}},"outputs":[{"name":"stdout","text":"High Risk\n","output_type":"stream"}],"execution_count":32},{"cell_type":"code","source":"#if-elif-else statement(image_resolution)\ndef image_resolution_classification():\n    \"\"\"\n    Given resolution is\"512 * 512\", classify image resolution based on width\n    Returns:\n        str: The resolution Classification\n    \"\"\"\n    resolution = 512 * 512\n   width,height = int(width,height)\n    if width < 512 :\n        return\"Low resolution\"\n    elif  512 <= width <= 1024:\n        return\"Medium resolution\"\n    else:\n        return\"High resolution\"\n\nprint(image_resolution_classification())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T05:34:39.038318Z","iopub.execute_input":"2025-02-27T05:34:39.038726Z","iopub.status.idle":"2025-02-27T05:34:39.044640Z","shell.execute_reply.started":"2025-02-27T05:34:39.038696Z","shell.execute_reply":"2025-02-27T05:34:39.043031Z"}},"outputs":[{"traceback":["\u001b[0;36m  File \u001b[0;32m\"<tokenize>\"\u001b[0;36m, line \u001b[0;32m9\u001b[0m\n\u001b[0;31m    width,height = int(width,height)\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unindent does not match any outer indentation level\n"],"ename":"IndentationError","evalue":"unindent does not match any outer indentation level (<tokenize>, line 9)","output_type":"error"}],"execution_count":46},{"cell_type":"code","source":"#if-elif-else statement(scan_time_warning)\ndef scan_time_warning():\n    \"\"\"\n    Given scan time in minutes\n    Returns:\n        str: The scan time classification\n    \"\"\"\n    time = 10\n    if time < 10:\n        return\"Fast scan\"\n    if 10 <= time <= 20:\n        return\"Optimal scan\"\n    else:\n        return\"Long scan, check settings\"\n    \nprint(scan_time_warning())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T05:35:19.842447Z","iopub.execute_input":"2025-02-27T05:35:19.842767Z","iopub.status.idle":"2025-02-27T05:35:19.850144Z","shell.execute_reply.started":"2025-02-27T05:35:19.842743Z","shell.execute_reply":"2025-02-27T05:35:19.848207Z"}},"outputs":[{"name":"stdout","text":"Optimal scan\n","output_type":"stream"}],"execution_count":47},{"cell_type":"code","source":"#if-elif-else statement(motion_artifacts_detection)\ndef detect_motion_artifacts():\n    \"\"\"\n    Classification of given motion_level (ranging from 1 to 5)\n    Returns:\n    str: The motion artifact classification\n    \"\"\"\n    motion_level = 4\n    if motion_level == 1:\n        return\"Minimal artifact\"\n    elif 2 <= motion_level <= 3:\n        return\"Moderate artifact\"\n    else:\n        return\"Severe artifact,re-scan required\"\n    \nprint(detect_motion_artifacts())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-27T05:35:53.685554Z","iopub.execute_input":"2025-02-27T05:35:53.685926Z","iopub.status.idle":"2025-02-27T05:35:53.693475Z","shell.execute_reply.started":"2025-02-27T05:35:53.685874Z","shell.execute_reply":"2025-02-27T05:35:53.692026Z"}},"outputs":[{"name":"stdout","text":"Severe artifact,re-scan required\n","output_type":"stream"}],"execution_count":48}]}